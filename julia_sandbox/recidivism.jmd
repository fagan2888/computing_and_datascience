```yaml
---
title: Analyzing Recidivism
author: Arnav Sood (`arnav.sood@ubc.ca`)
---
```

```julia
println("Executed $(read(`date`, String))")
```

## Setup

First, let's load some useful packages

```julia
# using Pkg # uncomment these lines if you need to install packages
# pkg"add CSV DataFrames HTTP Plots StatsBase StatsPlots VegaLite"
using CSV, DataFrames, HTTP, Plots, StatsBase, StatsPlots, VegaLite
using Statistics, LinearAlgebra
gr(fmt = :png)
```

And grab the data from the internet

```julia
url = "https://raw.githubusercontent.com/propublica/compas-analysis/master/compas-scores-two-years.csv"
raw = String(HTTP.get(url).body);
master = CSV.read(IOBuffer(raw));
```

As a sanity check, we can inspect the result

```julia
first(master, 6) # analogous to head(data)
```

We can also look at the set of features we have

```julia
@show names(master);
```

The key one is `two_year_recid`, which we'll be trying to predict.

## Data Cleaning

First, we need to do some cleaning.

Let's create a `data` object, so that our transformations won't contaminate the master data source (this isn't too costly here.)

```julia
data = deepcopy(master);
```

Next, let's drop all rows that are missing values for some key features:

```julia
featureList = [:sex, :age, :age_cat, :race, :priors_count, :c_charge_degree,
                :decile_score, :score_text]; # list of features we require complete data for

dropmissing!(data, featureList; disallowmissing = true);
println("Dropped $(nrow(master) - nrow(data)) rows")
```

We can also look for subtler data errors

```julia
filter!(r -> ~ismissing(r.days_b_screening_arrest) && abs(r.days_b_screening_arrest) <= 30, data); # only include rows with less than a month between screening and arrest
println("Dropped $(nrow(master) - nrow(data)) rows")
```

The justification here was that such a large gap between sentencing and arrest means that we don't have data on the correct offense.

## Exploratory Data Analysis (EDA)

At this stage, we can start to answer some basic questions.

While not strictly necessary for regression or visualization, this helps build an intuition for the dataset.

> What's the breakdown of recidivism by age and sex?

```julia
temp = by(data, [:age_cat, :sex], N = :two_year_recid => sum, p = :two_year_recid => mean, total = :two_year_recid => length)
```

> Can we get a visual snapshot of the data?

Glad you asked.

```julia
data |> @vlplot(:bar, x=:sex, column = :decile_score, color = :two_year_recid, y = "count()")
```

Here, the shaded area corresponds to recidivists, and the breakdown is by sex and decile.

> How well do recidivism scores correlate with actual recivisim?

One simple snapshot is:

```julia
cor(data[:decile_score], data[:two_year_recid])
```

To be more precise

```julia
for subset in groupby(data, [:sex, :race])
      println("The correlation for $(levels(subset[:sex])) + $(levels(subset[:race])) is $(cor(subset[:decile_score], subset[:two_year_recid]))")
end
```

This gives us a Cartesian grid for the utility of the decile score over race and sex.

We could visualize this data as such

```julia
```


Another way to answer this question is

```julia
temp = by(filter(row -> row[:id] in data[:id], master),
      [:decile_score], p = :two_year_recid => mean);

sort!(temp, :decile_score);
plot(temp[:decile_score], temp[:p], legend = false, xlabel = "Decile Score", ylabel = "Recidivism Frequency")
```

So, recidivism risk is at least monotone in decile score, on aggregate.

> Can we add other features to the plot?

[some kind of pull-it-all-together, preferably interactive, visualization]

## Regression Problem
